name: Build, test and deploy

on:
  workflow_call:
    inputs:
      POD_NAME:
        description: Used to kill the pods after an update on feature or dev where the docker image tag doesn't change
        required: false
        type: string
      RUN_PID_1_TEST:
        description: Used to skip pid 1 test for applications which immediately exits such as the Inspector
        required: false
        type: boolean
        default: true
      PROCESS_NAME:
        description: Container process name, eg. dhis2-instance-manager-api. Used to assert that the process is running under pid 1
        required: true
        type: string
      HEALTH_CHECK_ENDPOINT:
        description: Health check endpoint
        required: false
        type: string
        default: /health
    secrets:
      DOCKER_USERNAME:
        required: true
        description: Docker Hub Username
      DOCKER_PASSWORD:
        required: true
        description: Docker Hub Password
      SOPS_KMS_ARN:
        required: true
        description: KMS Key used to decrypt SOPS encrypted secrets
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS Access Key Id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS Secret Access Key
      KUBECONFIG:
        required: true
        description: Kubernetes Configuration
      SLACK_WEBHOOK:
        required: true
        description: Slack Webhook

jobs:
  build:
    env:
      DEPLOY_ENVIRONMENT: ${{ github.event_name == 'push' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'deploy')) }}
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - uses: actions/setup-go@v5.5.0
        with:
          go-version: 1.24.3

      - name: Install prerequisites
        run: make init

      - name: Run pre-commit checks
        run: make check

      - name: Install helm/helmfile/sops
        uses: alexellis/arkade-get@master
        with:
          helm: v3.12.3
          helmfile: v0.156.0
          sops: v3.7.3

      # im-manager expects helmfile/helm to be in /usr/bin
      - name: Move CLIs to /usr/bin
        run: |
          sudo mv $HOME/.arkade/bin/* /usr/bin/

      - name: Setup helm secrets plugin
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.3

      - name: Create dotenv from example
        run: |
          cp .env.example .env
          sed -i -e "s#SOPS_KMS_ARN=<kms-key-arn>#SOPS_KMS_ARN=$SOPS_KMS_ARN#g" .env
          sed -i -e "s#AWS_ACCESS_KEY_ID=<aws-access-key-id>#AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID#g" .env
          sed -i -e "s#AWS_SECRET_ACCESS_KEY=<aws-secret-access-key>#AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY#g" .env
          sed -i -e "s#DOCKER_INSTANCE_HOST=dev:8080#DOCKER_INSTANCE_HOST=prod:8080#g" .env
          echo "AWS_REGION=$AWS_REGION" >> .env
          cat .env | sed /^#/d >> $GITHUB_ENV
        env:
          SOPS_KMS_ARN: ${{ secrets.SOPS_KMS_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: "Environment: dev"
        if: github.ref == 'refs/heads/master'
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "CLASSIFICATION=dev" >> $GITHUB_ENV

      - name: "Environment: prod"
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "CLASSIFICATION=prod" >> $GITHUB_ENV

      - name: "Environment: feature"
        if: github.event_name == 'pull_request'
        run: |
          # convert to lower case
          HEAD_BRANCH_LOWERCASE=${GITHUB_HEAD_REF,,}

          # substitute all non-alphanumeric chars with hyphens "-"
          HEAD_BRANCH_LOWERCASE_NO_NONALPHANUMERIC=${HEAD_BRANCH_LOWERCASE//[^[:alnum:]]/-}

          # trim to 25 chars, in order to fit into the 53 char Helm release name limit
          # the rest of the chars up to the limit are saved for the static part of the release names
          SANITIZED_HEAD_BRANCH=${HEAD_BRANCH_LOWERCASE_NO_NONALPHANUMERIC::25}

          # trim last "-" if there is one
          SANITIZED_HEAD_BRANCH=$(echo $SANITIZED_HEAD_BRANCH | sed 's/\-$//')

          echo "ENVIRONMENT=$SANITIZED_HEAD_BRANCH" >> $GITHUB_ENV
          echo "CLASSIFICATION=feature" >> $GITHUB_ENV
          echo "SANITIZED_HEAD_BRANCH=$SANITIZED_HEAD_BRANCH" >> $GITHUB_ENV

      - name: Set hostnames based on environment
        run: |
          BASE_HOSTNAME="im.dhis2.org"
          echo "BASE_HOSTNAME=$BASE_HOSTNAME" >> $GITHUB_ENV

          if [[ "$ENVIRONMENT" == "prod" ]]; then
            echo "API_HOSTNAME=api.$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "API_URL=https://api.$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "UI_HOSTNAME=$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "UI_URL=https://$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "MATCHING_API_URL=https://api.$BASE_HOSTNAME" >> $GITHUB_ENV
          else
            echo "API_HOSTNAME=$ENVIRONMENT.api.$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "API_URL=https://$ENVIRONMENT.api.$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "UI_HOSTNAME=$ENVIRONMENT.$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "UI_URL=https://$ENVIRONMENT.$BASE_HOSTNAME" >> $GITHUB_ENV
            echo "MATCHING_API_URL=https://$ENVIRONMENT.api.$BASE_HOSTNAME" >> $GITHUB_ENV
          fi

      - name: Set API_URL for im-web-client
        if: github.repository == 'dhis2-sre/im-web-client'
        run: |
          # default to dev environment
          echo "API_URL=https://dev.api.$BASE_HOSTNAME" >> $GITHUB_ENV

          # use matching environment branch if it exists
          if [[ "$(curl -sSL -w %{http_code} -o /dev/null $MATCHING_API_URL/health)" == "200" ]]; then
            echo "API_URL=$MATCHING_API_URL" >> $GITHUB_ENV
          fi

      - name: Create RSA keypair
        run: |
          if make keys; then
            echo "PRIVATE_KEY=\"$(sed -z 's/\n/\\n/g' rsa_private.pem)\"" >> .env
          fi

      - name: Find version
        run: |
          # Use the head branch for PR event and branch/tag for push
          VERSION=${SANITIZED_HEAD_BRANCH:-$GITHUB_REF_NAME}

          # Strip "v" prefix from tag name
          [ "$GITHUB_REF_TYPE" == "tag" ] && VERSION=${VERSION#v}

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Export
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "VERSION=$VERSION"

# TODO: Split here... "Build"
      - name: Pin Docker Compose to version 2.37.1 (delete this step once we're above version 2.36.0 by default)
        run: |
          docker compose version
          sudo rm -f /usr/local/bin/docker-compose
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.37.1/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Build image
        run: make docker-image tag=$VERSION

      - name: Smoke test image
        run: |
          make smoke-test tag=$VERSION
        env:
          GIN_MODE: debug

      - name: Confirm ${{ inputs.HEALTH_CHECK_ENDPOINT }} returns 200
        id: healthcheck
        if: "${{ inputs.HEALTH_CHECK_ENDPOINT != '' }}"
        run: |
          timeout 1m bash -c 'until curl --silent --fail localhost:8080${{ inputs.HEALTH_CHECK_ENDPOINT }}; do sleep 2; done'

      - name: Debug failed healthcheck
        if: always() && (steps.healthcheck.outcome == 'failure')
        run: |
            docker ps --all
            echo "docker compose logs prod"
            docker compose logs prod
            echo "Healthcheck after smoke test failed"
            exit 1

      - name: Confirm process exited with code 0
        if: "${{ inputs.HEALTH_CHECK_ENDPOINT == '' }}"
        run: |
          exit_code=$(docker inspect $(docker compose ps --quiet --all prod) | jq -r '.[0].State.ExitCode'); echo "Service 'prod' exited with code $exit_code"; [ "$exit_code" -eq 0 ]

      - name: Confirm process isn't running as root
        run: |
          USER=$(docker compose run --entrypoint whoami prod)
          echo "User: $USER"
          [ "$USER" != "root" ]
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: Confirm process is running as pid 1
        if: ${{ inputs.RUN_PID_1_TEST }}
        run: |
          PID=$(docker compose exec -T prod pgrep ${{ inputs.PROCESS_NAME }} | head -n 1)
          echo "PID: $PID"
          [ "$PID" == "1" ]
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: End smoke test
        run: make clean

      - name: Run unit and integration tests
        run: make test
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image
        run: |
          docker images
          make push-docker-image tag=$VERSION

# TODO: Split here... "Deploy"
      - name: Setup yq
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /tmp/yq
          sudo mv /tmp/yq /usr/bin/yq
          chmod +x /usr/bin/yq
        env:
          VERSION: v4.2.0
          BINARY: yq_linux_amd64

      - name: Update chart image tag
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          TARGET=helm/chart/values.yaml
          yq -i e ".image.tag = \"${{ env.VERSION }}\"" $TARGET
      # TODO: Assert the files was actually changed... The below doesn't work
      #          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Update chart version
        if:  ${{ startsWith(github.ref, 'refs/tags/v') && env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          TARGET=helm/chart/Chart.yaml
          yq -i e ".version = \"${{ env.VERSION }}\"" $TARGET
          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Update chart app version
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          TARGET=helm/chart/Chart.yaml
          yq -i e ".appVersion = \"${{ env.VERSION }}\"" $TARGET
          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Setup aws-iam-authenticator
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        uses: prepor/action-aws-iam-authenticator@master

      - name: Check aws-iam-authenticator version
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: aws-iam-authenticator version

      - name: Configure kubectl
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          mkdir $PWD/.kube
          echo "${{ secrets.KUBECONFIG }}" > $PWD/.kube/config
          echo "KUBECONFIG=$PWD/.kube/config" >> $GITHUB_ENV

      - name: Get nodes
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: kubectl get nodes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Lint Helm
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: helm lint helm/chart -f helm/data/secrets/$CLASSIFICATION/values.yaml

      - name: Test chart
        run: echo TODO

      - name: Push chart
        run: echo TODO

      - name: Find pod to restart
        if: ${{ inputs.POD_NAME && env.DEPLOY_ENVIRONMENT == 'true' }}
        run: echo "POD_SELECTOR=app.kubernetes.io/instance=${{ inputs.POD_NAME }}-$ENVIRONMENT" >> $GITHUB_ENV

      - name: Setup Skaffold
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          wget https://storage.googleapis.com/skaffold/releases/${VERSION}/${BINARY} -O ./skaffold
          chmod +x ./skaffold
        env:
          VERSION: v2.6.0
          BINARY: skaffold-linux-amd64

      - name: Deploy
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' }}
        run: |
          IMAGE=$(yq e '.services.prod.image' docker-compose.yml | cut -f1 -d":")
          SKAFFOLD_PROFILE=$([ "$CLASSIFICATION" == "feature" ] && echo "dev" || echo "$CLASSIFICATION")

          ./skaffold deploy --images $IMAGE:$VERSION --profile $SKAFFOLD_PROFILE

          if [ -n "$POD_SELECTOR" ]; then
            kubectl delete pod --namespace $NAMESPACE --selector=$POD_SELECTOR
          fi

          kubectl get pods --namespace $NAMESPACE
        env:
          POD_SELECTOR: ${{ env.POD_SELECTOR }}
          FEATURE_TAG: -${{ env.VERSION }}
          NAMESPACE: instance-manager-${{ env.CLASSIFICATION }}

          KUBECONFIG: ${{ env.KUBECONFIG }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Comment deployed environment URL
        uses: actions-cool/maintain-one-comment@v3
        if: ${{ env.DEPLOY_ENVIRONMENT == 'true' && github.ref != 'refs/heads/master' && !startsWith(github.ref, 'refs/tags/v') }}
        env:
          # TODO update once https://github.com/actions/runner/issues/409 is resolved
          APP_URL: "https://${{ contains(github.repository, 'im-web-client') && env.UI_HOSTNAME || env.API_HOSTNAME }}"
        with:
          body: "App deployed to ${{ env.APP_URL }}"

  send-slack-message:
    runs-on: ubuntu-latest
    if: always() && contains(needs.*.result, 'failure') && github.ref == 'refs/heads/master'
    needs: [ build ]
    steps:
      - uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: 'team-backend'
          SLACK_MESSAGE: "Latest test run on master failed and needs investigation :detective-duck:. \n Commit message: ${{ github.event.head_commit.message }}"
          SLACK_COLOR: '#ff0000'

name: Tests, build and deploy

on:
  workflow_call:
    inputs:
      POD_NAME:
        description: Used to kill the pods after an update on feature or dev where the docker image tag doesn't change
        required: false
        type: string
      RUN_PID_1_TEST:
        description: Used to skip pid 1 test for applications which immidiatly exits such as the Inspector
        required: false
        type: boolean
        default: true
      PROCESS_NAME:
        description: Container process name, eg. dhis2-instance-manager-api. Used to assert that the process is running under pid 1
        required: true
        type: string
      HEALTH_CHECK_ENDPOINT:
        description: Health check endpoint
        required: false
        type: string
        default: /health
    secrets:
      DOCKER_USERNAME:
        required: true
        description: Docker Hub Username
      DOCKER_PASSWORD:
        required: true
        description: Docker Hub Password
      SOPS_KMS_ARN:
        required: true
        description: KMS Key used to decrypt SOPS encrypted secrets
      AWS_ACCESS_KEY_ID:
        required: true
        description: AWS Access Key Id
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: AWS Secret Access Key
      KUBECONFIG:
        required: true
        description: Kubernetes Configuration

jobs:
  build:
    if: github.event_name == 'push'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-python@v4.6.1
        with:
          python-version: '3.x'

      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.1

      - name: Install prerequisites
        run: |
          make init

          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose-cli/releases/download/v2.0.0-beta.6/docker-compose-linux-amd64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Run pre-commit checks
        run: make check

      - name: Create dotenv from example
        run: |
          cp .env.example .env
          sed -i -e "s#SOPS_KMS_ARN=<kms-key-arn>#SOPS_KMS_ARN=$SOPS_KMS_ARN#g" .env
          sed -i -e "s#AWS_ACCESS_KEY_ID=<aws-access-key-id>#AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID#g" .env
          sed -i -e "s#AWS_SECRET_ACCESS_KEY=<aws-secret-access-key>#AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY#g" .env
          sed -i -e "s#DOCKER_INSTANCE_HOST=dev:8080#DOCKER_INSTANCE_HOST=prod:8080#g" .env
          echo "AWS_REGION=$AWS_REGION" >> .env
          cat .env | sed /^#/d >> $GITHUB_ENV
        env:
          SOPS_KMS_ARN: ${{ secrets.SOPS_KMS_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: "Environment: dev"
        if: github.ref == 'refs/heads/master'
        run: echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - name: "Environment: prod"
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: "Environment: feature"
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: echo "ENVIRONMENT=feature" >> $GITHUB_ENV

      - name: Environment
        run: env

      - name: Create RSA keypair
        run: |
          if make keys; then
            echo "PRIVATE_KEY=\"$(sed -z 's/\n/\\n/g' rsa_private.pem)\"" >> .env
            echo "PUBLIC_KEY=\"$(sed -z 's/\n/\\n/g' rsa_public.pem)\"" >> .env
          fi

      - name: Find version
        run: |
          # Strip git ref prefix from version
          STRIPPED_REF=${GITHUB_REF##refs/*/}

          # Strip "v" prefix from tag name
          VERSION=${STRIPPED_REF#v}

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Export
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "VERSION=$VERSION"

# TODO: Split here... "Build"
      - name: Build image
        run: make docker-image tag=$VERSION

      - name: Smoke test image
        run: |
          make smoke-test tag=$VERSION

          hasPort=$(docker inspect $(docker compose ps -q prod) | jq -r '.[0].HostConfig.PortBindings."8080/tcp" | .[0].HostPort' | tr -d null)
          if [ -n "$hasPort" ]; then
            echo "hasPort: $hasPort"
            echo "hasPort=$hasPort" >> $GITHUB_ENV
          else
            echo "No port found!"
          fi

          sleep 5
          docker ps
          docker compose logs prod
        env:
          GIN_MODE: debug

      - name: Confirm ${{ inputs.HEALTH_CHECK_ENDPOINT }} returns 200
        if: ${{ env.hasPort }}
        run: |
          docker ps
          docker compose logs prod
          curl --silent --fail localhost:8080${{ inputs.HEALTH_CHECK_ENDPOINT }}

      - name: Confirm process isn't running as root
        run: |
          USER=$(docker compose run --entrypoint whoami prod)
          echo "User: $USER"
          [ "$USER" != "root" ]
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: Confirm process is running as pid 1
        if: ${{ inputs.RUN_PID_1_TEST }}
        run: |
          PID=$(docker compose exec -T prod pgrep ${{ inputs.PROCESS_NAME }} | head -n 1)
          echo "PID: $PID"
          [ "$PID" == "1" ]
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: End smoke test
        run: make clean

      - name: Run unit and integration tests
        run: make test
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: Log into registry
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          docker images
          make push-docker-image tag=$VERSION

# TODO: Split here... "Deploy"
      - name: Setup yq
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /tmp/yq
          sudo mv /tmp/yq /usr/bin/yq
          chmod +x /usr/bin/yq
        env:
          VERSION: v4.2.0
          BINARY: yq_linux_amd64

      - name: Update chart image tag
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          TARGET=helm/chart/values.yaml
          yq -i e ".image.tag = \"${{ env.VERSION }}\"" $TARGET
      # TODO: Assert the files was actually changed... The below doesn't work
      #          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Update chart version
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') && startsWith(github.ref, 'refs/tags/v') }}
        run: |
          TARGET=helm/chart/Chart.yaml
          yq -i e ".version = \"${{ env.VERSION }}\"" $TARGET
          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Update chart app version
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          TARGET=helm/chart/Chart.yaml
          yq -i e ".appVersion = \"${{ env.VERSION }}\"" $TARGET
          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        uses: prepor/action-aws-iam-authenticator@master
      - if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: aws-iam-authenticator version

      - name: Pin kubectl to version v1.23.6 (https://github.com/aws/aws-cli/issues/6920)
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.23.6/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Configure kubectl
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          mkdir $PWD/.kube
          echo "${{ secrets.KUBECONFIG }}" > $PWD/.kube/config
          echo "KUBECONFIG=$PWD/.kube/config" >> $GITHUB_ENV

      - name: Get nodes
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: kubectl get nodes
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup Sops
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        uses: mdgreenwald/mozilla-sops-action@v1.4.1

      - name: Setup helm secrets plugin
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.3

      - name: Lint Helm
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: helm lint helm/chart -f helm/data/values/$ENVIRONMENT/values.yaml -f helm/data/secrets/$ENVIRONMENT/values.yaml

      - name: Test chart
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: echo TODO

      - name: Push chart
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: echo TODO

      - name: Find pod to restart
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') && inputs.POD_NAME }}
        run: echo "POD_SELECTOR=app.kubernetes.io/instance=${{ inputs.POD_NAME }}-$ENVIRONMENT" >> $GITHUB_ENV

      - name: Setup Skaffold
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          wget https://storage.googleapis.com/skaffold/releases/${VERSION}/${BINARY} -O ./skaffold
          chmod +x ./skaffold
        env:
          VERSION: v2.1.0
          BINARY: skaffold-linux-amd64

      - name: Deploy
        if: ${{ !startsWith(github.ref, 'refs/heads/feature/') }}
        run: |
          IMAGE=$(yq e '.services.prod.image' docker-compose.yml | cut -f1 -d":")
          ./skaffold deploy --images $IMAGE:$VERSION

          if [ -n "$POD_SELECTOR" ]; then
            kubectl delete pod --namespace $NAMESPACE --selector=$POD_SELECTOR
          fi

          kubectl get pods --namespace $NAMESPACE
        env:
          POD_SELECTOR: ${{ env.POD_SELECTOR }}
          FEATURE_TAG: -${{ env.VERSION }}
          NAMESPACE: instance-manager-${{ env.ENVIRONMENT }}

          KUBECONFIG: ${{ env.KUBECONFIG }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

name: Tests, build and deploy

on:
  workflow_call:
    inputs:
      DOCKER_IMAGE_NAME:
        description: 'Docker image name, eg. dhis2/instance-manager-api'
        required: true
        type: string
      PROCESS_NAME:
        description: 'Container process name, eg. dhis2-instance-manager-api. Used to assert that the process is running under pid 1'
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
        description: 'Docker Hub Username'
      DOCKER_PASSWORD:
        required: true
        description: 'Docker Hub Password'
      SOPS_KMS_ARN:
        required: true
        description: 'KMS Key used to decrypt SOPS encrypted secrets'
      AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS Access Key Id'
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS Secret Access Key'
      KUBECONFIG:
        required: true
        description: 'Kubernetes Configuration'

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - name: Install prerequisites
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose-cli/releases/download/v2.0.0-beta.6/docker-compose-linux-amd64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Create dotenv from example
        run: |
          cp .env.example .env
          sed -i -e "s#SOPS_KMS_ARN=<kms-key-arn>#SOPS_KMS_ARN=$SOPS_KMS_ARN#g" .env
          sed -i -e "s#AWS_ACCESS_KEY_ID=<aws-access-key-id>#AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID#g" .env
          sed -i -e "s#AWS_SECRET_ACCESS_KEY=<aws-secret-access-key>#AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY#g" .env
          sed -i -e "s#DOCKER_INSTANCE_HOST=dev:8080#DOCKER_INSTANCE_HOST=prod:8080#g" .env
          echo "AWS_REGION=$AWS_REGION" >> .env
        env:
          SOPS_KMS_ARN: ${{ secrets.SOPS_KMS_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: Load dotenv file
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env

      - name: Create RSA keypair
        run: |
          make keys
          # TODO: Why can't prod find the key??
          # Bad idea! But what's the alternative? The key isn't used for long...
          chmod ugo+r rsa_private.pem

      - name: Find version
        run: |
          # Strip git ref prefix from version
          STRIPPED_REF=${GITHUB_REF##refs/*/}

          # Strip "v" prefix from tag name
          VERSION=${STRIPPED_REF#v}

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Export
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "VERSION=$VERSION"

      - name: Run unit and integration tests
        run: make test
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: Prepare
        id: prep
        run: |
          echo 1
          # TAG=$(echo $GITHUB_SHA | head -c7)
          #TAG=${{ env.VERSION }}
          #IMAGE="dhis2/instance-manager-api"
          #echo ::set-output name=tagged_image::${IMAGE}:${TAG}
          #echo ::set-output name=tag::${TAG}

      - name: Set up Docker Buildx
        id: buildx
        # Use the action from the master, as we've seen some inconsistencies with @v1
        # Issue: https://github.com/docker/build-push-action/issues/286
        uses: docker/setup-buildx-action@master
        # Only worked for us with this option on 🤷‍♂️
        with:
          install: true

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          # Key is named differently to avoid collision
          key: ${{ runner.os }}-multi-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-multi-buildx

      - name: Build production image
        uses: docker/build-push-action@v2
        with:
          context: .
          load: true
          push: false
          tags: dhis2/instance-manager-api:${{ env.VERSION }}
          cache-from: type=local,src=/tmp/.buildx-cache
          # Note the mode=max here
          # More: https://github.com/moby/buildkit#--export-cache-options
          # And: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

#      - name: Smoke test image
#        run: |
#          make smoke-test tag=${{ env.VERSION }}
#
#      #          # TODO: Write note... Ensure that sha...
#      #          IMAGE_SHA=$(docker inspect ${{ inputs.DOCKER_IMAGE_NAME }}:${{ env.VERSION }} | jq -r '.[0].Id')
#      #          echo "IMAGE_SHA: $IMAGE_SHA"
#      #          echo "env.IMAGE_SHA: ${{ env.IMAGE_SHA }}"
#      #          [ "$IMAGE_SHA" == "${{ env.IMAGE_SHA }}" ]
#
#      - name: Confirm /health returns 200
#        run: |
#          sleep 4
#          curl --fail localhost:8080/health
#
#      - name: Confirm process isn't running as root
#        run: |
#          USER=$(docker compose exec -T prod whoami)
#          [ "$USER" != "root" ]
#        env:
#          IMAGE_TAG: ${{ env.VERSION }}
#
#      - name: Confirm process is running as pid 1
#        run: |
#          PID=$(docker compose exec -T prod pgrep ${{ inputs.PROCESS_NAME }})
#          [ "$PID" == "1" ]
#        env:
#          IMAGE_TAG: ${{ env.VERSION }}
#
#      - name: End smoke test
#        run: make clean
#

      - name: Log into registry
        run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push image
        run: |
          docker images
          IMAGE_TAG=${{ env.VERSION }} docker compose push prod

      - name: Setup yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /usr/bin/yq
          chmod +x /usr/bin/yq
        env:
          VERSION: v4.2.0
          BINARY: yq_linux_amd64

      - name: Update chart image tag
        run: |
          TARGET=helm/chart/values.yaml
          yq -i e ".image.tag = \"${{ env.VERSION }}\"" $TARGET
      # TODO: Assert the files was actually changed... The below doesn't work
      #          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Update chart version
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TARGET=helm/chart/Chart.yaml
          yq -i e ".version = \"${{ env.VERSION }}\"" $TARGET
          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - name: Update chart app version
        run: |
          TARGET=helm/chart/Chart.yaml
          yq -i e ".appVersion = \"${{ env.VERSION }}\"" $TARGET
          cat $TARGET
          [ "$(git diff --exit-code $TARGET)" != "0" ]

      - uses: prepor/action-aws-iam-authenticator@master
      - run: aws-iam-authenticator version

      - name: Configure kubectl
        run: |
          mkdir /home/runner/.kube
          echo "${{ secrets.KUBECONFIG }}" > /home/runner/.kube/config

      - name: Get nodes
        run: kubectl get nodes

      - name: Lint Helm
        run: helm lint helm/chart

      - name: Test chart
        run: echo TODO

      - name: Push chart
        run: echo TODO

      - name: Setup Sops
        uses: mdgreenwald/mozilla-sops-action@v1.1.0

      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v0.7.0

      - name: Setup helm secrets plugin
        run: helm plugin install https://github.com/jkroepke/helm-secrets --version v3.8.3

      - name: "Environment: dev"
        if: github.ref == 'refs/heads/master'
        run: echo "ENVIRONMENT=dev" >> $GITHUB_ENV

      - name: "Environment: prod"
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: "Environment: feature"
        if: startsWith(github.ref, 'refs/heads/feature/')
        run: echo "ENVIRONMENT=feature" >> $GITHUB_ENV

      - name: Deploy
        run: |
          if [[ "$ENVIRONMENT" == "feature" ]]; then
            export FEATURE_TAG=-$VERSION
            helmfile -e feature sync
            kubectl delete pod --namespace $NAMESPACE --selector=app.kubernetes.io/instance=instance-manager-api-feat${FEATURE_TAG,,}
          else
            helmfile -e $ENVIRONMENT sync
          fi

          kubectl get pods --namespace $NAMESPACE
        env:
          FEATURE_TAG: -${{ env.VERSION }}
          NAMESPACE: instance-manager-${{ env.ENVIRONMENT }}

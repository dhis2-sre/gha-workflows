name: Docker hello world test

on:
  workflow_call:
    inputs:
      DOCKER_IMAGE_NAME:
        description: 'Docker image name, eg. dhis2/instance-manager-api'
        required: true
        type: string
    secrets:
      DOCKER_USERNAME:
        required: true
        description: 'Docker Hub Username'
      DOCKER_PASSWORD:
        required: true
        description: 'Docker Hub Password'
      SOPS_KMS_ARN:
        required: true
        description: 'KMS Key used to decrypt SOPS encrypted secrets'
      AWS_ACCESS_KEY_ID:
        required: true
        description: 'AWS Access Key Id'
      AWS_SECRET_ACCESS_KEY:
        required: true
        description: 'AWS Secret Access Key'
      KUBECONFIG:
        required: true
        description: 'Kubernetes Configuration'

jobs:
  build:
    runs-on: ubuntu-20.04
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Install prerequisites
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose-cli/releases/download/v2.0.0-beta.6/docker-compose-linux-amd64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Create dotenv from example
        run: |
          cp .env.example .env
          sed -i -e "s#SOPS_KMS_ARN=<kms-key-arn>#SOPS_KMS_ARN=$SOPS_KMS_ARN#g" .env
          sed -i -e "s#AWS_ACCESS_KEY_ID=<aws-access-key-id>#AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID#g" .env
          sed -i -e "s#AWS_SECRET_ACCESS_KEY=<aws-secret-access-key>#AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY#g" .env
          sed -i -e "s#DOCKER_INSTANCE_HOST=dev:8080#DOCKER_INSTANCE_HOST=prod:8080#g" .env
          echo "AWS_REGION=$AWS_REGION" >> .env
        env:
          SOPS_KMS_ARN: ${{ secrets.SOPS_KMS_ARN }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: Load dotenv file
        uses: c-py/action-dotenv-to-setenv@v2
        with:
          env-file: .env

      - name: Create RSA keypair
        run: |
          make keys
          # TODO: Why can't prod find the key??
          # Bad idea! But what's the alternative? The key isn't used for long...
          chmod ugo+r rsa_private.pem

      - name: Find version
        run: |
          # Strip git ref prefix from version
          STRIPPED_REF=${GITHUB_REF##refs/*/}

          # Strip "v" prefix from tag name
          VERSION=${STRIPPED_REF#v}

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          # Export
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          echo "VERSION=$VERSION"

      - name: Launch WhoAmI
        run: docker run -d -p 8081:8080 ${{ inputs.DOCKER_IMAGE_NAME }}

      - name: nmap setup
        run: sudo apt -y install nmap

      - name: docker ps & nmap
        run: docker ps && nmap localhost

      - name: Confirm /health returns 200
        run: |
          sleep 4
          curl --fail localhost:8081/health

      - name: docker ps & nmap
        run: docker ps && nmap localhost

      - name: Up support containers
        run: docker compose up -d redis database rabbitmq kubernetes

      - name: docker ps & nmap
        run: docker ps && nmap localhost

      - name: Redis logs
        run: docker compose logs redis

      - name: RabbitMQ logs
        run: docker compose logs rabbitmq

      - name: Kubernetes IP
        run: docker inspect $(docker container ls --filter name=kubernetes -q) | grep IPAddress

      - name: Up prod
        run: docker compose up -d prod
        env:
          IMAGE_TAG: ${{ env.VERSION }}

      - name: docker ps & nmap
        run: docker ps && nmap localhost

      - name: Up init
        run: docker compose up -d kubernetes-init

      - name: docker ps & nmap
        run: docker ps && nmap localhost

      - name: init logs
        run: docker compose logs -f kubernetes-init

      - name: docker ps & nmap
        run: docker ps && nmap localhost
